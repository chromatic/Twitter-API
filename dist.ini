author         = Marc Mims <marc@questright.com>
license        = Perl_5
copyright_year = 2015-2021
copyright_holder = Marc Mims

;; copied from @Milla and modified

[NameFromDirectory]

; Make the git repo installable
[Git::GatherDir]
exclude_filename = Build.PL
exclude_filename = META.json
exclude_filename = LICENSE
exclude_filename = README.md

[CopyFilesFromBuild]
copy = META.json
copy = LICENSE
copy = Build.PL

; should be after GatherDir
; Equivalent to Module::Install's version_from, license_from and author_from
[VersionFromMainModule]

[ReversionOnRelease]
prompt = 1

; after ReversionOnRelease for munge_files, before Git::Commit for after_release
[NextRelease]
format = %-6v  %{yyyy-MM-dd HH:mm:ss VVV}d%{ (TRIAL RELEASE)}T

[Git::Check]
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = META.json
allow_dirty = README.md
allow_dirty = Build.PL
; for $VERSION
allow_dirty = lib/Twitter/API.pm

; Make Github center and front
[GithubMeta]
issues = 1

[MetaResources]
x_IRC  = irc://irc.perl.org/#net-twitter

; Set no_index to sensible directories
[MetaNoIndex]
directory = t
directory = xt
directory = inc
directory = share
directory = eg
directory = examples

[PkgVersion]
[SurgicalPodWeaver]
replacer = replace_with_comment
post_code_replacer = replace_with_nothing

[MetaProvides::Package]

; cpanfile -> META.json
[Prereqs::FromCPANfile]
[ModuleBuildTiny]
[MetaJSON]

; x_contributors for MetaCPAN
[Git::Contributors]

; standard stuff
[PodSyntaxTests]
[MetaYAML]
[License]
[ReadmeAnyFromPod]
[ReadmeAnyFromPod/ReadmeTextInBuild]
[ExtraTests]
[ExecDir]
dir = script

[ShareDir]
[Manifest]
[ManifestSkip]

[CheckChangesHasContent]
[TestRelease]
[ConfirmRelease]

;[ $ENV{FAKE_RELEASE} ? 'FakeRelease' : 'UploadToCPAN' ],
[UploadToCPAN]

[CopyFilesFromRelease]
;match = \.pm$

[Git::Commit]
commit_msg  = Release %v
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = META.json
allow_dirty = README.md
allow_dirty = Build.PL
; for $VERSION
allow_dirty = lib/Twitter/API.pm

; .pm files copied back from Release
;allow_dirty_match = \.pm$ ; .pm files copied back from Release

[Git::Tag]
tag_format  = %v
tag_message =

[Git::Push]
remotes_must_exist = 0
